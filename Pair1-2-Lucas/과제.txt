
### 과제1 디자인 시스템을 활용한 공용 컴포넌트 만들기

본문 참조, 기존에 있던 것을 가져다가 쓰는 것이 아닌 스스로 디자인 토큰을 정의하고 반드시 디자인 토큰을 props로 전달 받아야합니다. 
디자인 토큰만 전달했을 때 컴포넌트가 생산되도록..!!!

- 디자인 토큰의 요소
color : basicColor, backgroundColor, fontColor, warningColor
font : font, fontSize, lineSpacing, letterSpacing
공간 : 컴포넌트 간격, margin, padding
size : button, input 등 components 의 basicSize
테두리 : 테두리 thickness, 스타일(실선, 점선 등), 테두리 color


1-3) 디자인 토큰과 공용 컴포넌트 만들어보기

아래의 사진을 바탕으로 아래의 공용 컴포넌트를 5가지 이상 만들어보세요
단 공용 컴포넌트에는 크기, 색상, 폰트 크기 등의 디자인 토큰을
props로 전달 받아야합니다.

(1) Select (DropDown)
(2) Input (Text)
(3) Button
...

! 하면 안되는 사항
const Button = ({width, height}) => {
	return ( <button {...{...width, height}}></button> )
}


위의 경우는 개발의 편의성을 위해 CSS 중복을 피하기 위한 개발을 위한 컴포넌트일 뿐
디자인 시스템이 적용되어있는 사례가 아닙니다.

디자인 시스템을 적용하기 위해서는 Button의 Size와 같은 디자인 토큰을 Props로
전달 받아야해요 :)

===================================================================


### 과제2 UI 인벤토리 만들기

생성했던 공용 컴포넌트를 스토리북을 활용하여 UI 인벤토리화 해보세요 :}
페이지네이션 컴포넌트를 스토리북을 활용하여 UI 인벤토리화 해세요 :]


===================================================================



### 과제3 다양한 스타일 라이브러리를 활용하여 디자인 시스템 적용하기

본문참조, 다양한 스타일 라이브러리를 활용하여 공용 컴포넌트 만들기


3. 다양한 Style과 UI라이브러리 사용해보기

다양한 style 라이브러리

사실 개인적인 견해로 css는 다양한 형태를 안다고 해서 달라지는 것이 없습니다.
마음만 먹으면 일주일도 안되서 사용법을 거의 완벽히 익힐 수 있기 때문입니다.

중요한 것은 해당 라이브러리를 사용하여 디자인 시스템을 적용하고
장단점과 다른 style 라이브러리와의 차이점을 명확히 구분하는 것입니다.

아래는 다양한 style 라이브러리 중 현재 실무에서 가장 많이 사용하고 있는
style 라이브러리입니다.

아래 항목의 {장단점}을 조사하고 위의 {디자인 시스템}을 적용했던
공용 컴포넌트를 아래의 style 라이브러리로 구현해보세요

(1) tailwind-css는
(2) styled-components
(3) emotion


===================================================================

### 과제4 UI 라이브러리 사용하여 컴포넌트 3개씩 사용해보기

UI 라이브러리

생산성을 위해서 이미 생성된 라이브러리를 활용하여 빠르게 컴포넌트를 생성할 수 있습니다.

대표적으로 자주 쓰이는 UI 라이브러리는 아래와 같습니다.

(1) MUI
(2) Chakra UI
(3) TailwindCSS UI
(4) Shadcn UI
(5) Headless UI

위의 UI 라이브러리를 활용하여 각각 컴포넌트를 3개 만들어보세요!
단, 결코 복붙으로 옮기면 안되고 본인의 형태로 개조해서 사용해야 합니다.


===================================================================