두번째 주차 목표
story book을 활용한 ui inventory 관리, CDD 개념 확립
입력 요소의 유효성 검사와 랜더링 최적화

1. 디자인 토큰과 디자인 시스템

1-1) 디자인 토큰이란?

디자인 토큰이란 디자인 되어있는 템플릿을 기반으로 설정된
컬러와 자간 등 가장 작은 디자인 요소의 단위를 이야기합니다.

이러한 요소의 단위는 하나의 디자인에서 무한히 재사용될 수 있기 때문에
프론트엔드는 이를 토큰화하여 재사용 할 수 있는 상태로 만들어야합니다.

ex)

const COLORS = {
    GRAY: {
        100: ""
        200: ""
    }
}

===================================================================

1-2) 디자인 시스템 차이

디자인 시스템이란, 디자인 원칙, 재사용 가능한 UI 패턴/컴포넌트, 코드로 구성된 시스템을 이야기합니다.

즉 간단하게 말하면 디자인 토큰이 적용된 상태에서 재사용 가능한 
UI패턴과 컴포넌트를 실제 코드로 구현하여 사용 가능한 상태로 만들어내는 것이죠

즉 여러분들이 만들었던 일반적인 컴포넌트는 일반적인 색상만이 지정된 것이 아닌
디자이너가 정해놓은 디자인 토큰 값에 따라 지정된 변수로

저희는 여태까지 디자이너가 없는 환경에서 작업했기 때문에 이러한 디자인 시스템을
임의로 생성하였지만 명확히 디자인 시스템의 차이를 알고 디자이너가 피그마에 적용한
디자인 시스템을 적용한 컴포넌트를 만들어야 해요!

그래야만 저희가 공용 컴포넌트를 만들 때 단순히 사용성이 아닌
앞으로의 디자인에 맞춰 올바른 형태의 컴포넌트를 만들 수 있어요 :)

ex)

사진 첨부


===================================================================

1-3) 디자인 토큰과 공용 컴포넌트 만들어보기

아래의 사진을 바탕으로 아래의 공용 컴포넌트를 5가지 이상 만들어보세요
단 공용 컴포넌트에는 크기, 색상, 폰트 크기 등의 디자인 토큰을
props로 전달 받아야합니다.

(1) Select (DropDown)
(2) Input (Text)
(3) Button
...

===================================================================

! 하면 안되는 사항
const Button = ({width, height}) => {
    return ( <button {...{width, height}}></button>)
}

위의 경우는 개발의 편의성을 위해 CSS 중복을 피하기 위한 개발을 위한 컴포넌트일 뿐
디자인 시스템이 적용되어있는 사례가 아닙니다.

디자인 시스템을 적용하기 위해서는 Button의 Size와 같은 디자인 토큰을 Props로 전달 받아야해요 :)

디자인 시스템을 적용하지 않게되면 저희는 "00C37D" 라는 색상을 검색으로 찾아 이것이 Green[100] 이라는 값이라는 것을
인지해야 하며 이는 곧바로 생산성 저하로 이어집니다.

하지만 디자인 시스템이 적용되어 있다면 저희는 따로 해당 헥스값을 찾지 않아도 되므로
보다 빠른 속도로 컴포넌트를 생성하고 프로젝트를 완성해 갈 수 있어요!

따라서 디자이너에게 이러한 디자인 시스템의 요청은 전체적인 생산성의 향상을 위해 필수적인 요소가 될 수 있습니다

@refrences
https://brunch.co.kr/@ultra0034/138
https://all-done.tistory.com/96



2. 스토리북 사용하기, CDD

스토리북이란?

React에서 Components의 중요성은 말하지 않아도 알고 있을 것입니다.
그러나 이러한 컴포넌트 때문에 오히려 유지보수가 어려워지는 상황이 있는데요!
바로 재사용되지 못하는 컴포넌트가 생긴다는 것입니다.

분명 재사용 될 거라 생각했던 컴포넌트들이 재사용되지 않으면서
많은 부채를 생성하고, 이러한 부채는 점점 쌓여 향후에는 내 프로젝트에 어떤 컴포넌트가 있었는지 조차 의심하게 될거예요...

이러한 컴포넌트들의 재사용성을 효율적으로 활용하고 부채를 만들지 않기 위해
탄생한 개발 방법이 바로 컴포넌트 주도 개발(CDD) 입니다.

공용으로 사용되는 컴포넌트는 주로 디자이너에 의해 생성이 되는데요
아쉽게도 컴포넌트 양이 많으면 많아질수록 관리가 힘든 것은 당연한 것입니다.

따라서 생성된 컴포넌트를 디자이너와 개발자가 함께 볼 수 있도록 하여
기존에 생성된 컴포넌트로 화면을 디자인 및 개발할 수 있도록 하는 UI 보관소가 필요했는데요!

그것이 바로 StoryBook 입니다.

===================================================================

스토리북 사용하기

Storybook을 명확히 사용하기 위해서는 그 의미를 명확히 알고 있어야 합니다.

"재사용 될 수 있는 컴포넌트를 개발자와 디자이너가 확인 할 수 있도록 인벤토리에 보관한다"

아래는 Storybook 사용시 자주 활용하는 옵션들 중 하나입니다.
모두 중요하지만 꼭 다 알아야 할 필요는 없습니다.

특히 Play function은 알아두면 좋지만 굳이 UI 인벤토리 용도의 스토리북과는 거리가 조금 멀다고 할 수 있어요 :)

하지만 * 표시되어 있는 것은 모른다면 스토리북 활용이 어려우니 꼭 숙지해보도록 해요!

(1) * init
https://storybook.js.org/docs/get-started/install

`npx storybook@latest init`
`npm run storybook`


(2) * args
https://storybook.js.org/docs/writing-stories/args

`variant의 value에 따라 다양한 컴포넌트를 생성하기 위해 필수적인 요소`
`args를 통해 <Button> 컴포넌트를 활용하여 primary-button과 secondary-button 생성 가능`


(3) parameters
https://storybook.js.org/docs/writing-stories/parameters

`stroybook의 preview와 main에 차이에 대해서 명확히 알아보기`

.storybook/main.js: 
Storybook의 구성을 정의하는 파일입니다.

.storybook/preview.js: 
개발자가 이 파일에서 전역적으로 사용될 추가 설정을 정의할 수 있습니다.


(4) Play function
https://storybook.js.org/docs/writing-stories/play-function

보통 storybook을 단순히 ui 인벤토리로 삼지 않고 테스트 도구로 삼기 위해서도 사용합니다.
잘 나누어진 ui 인벤토리와 컴포넌트는 jest와 같은 test-code를 연동하여 테스트를 위해
사용할 수 있습니다.

(5) * Actions
https://storybook.js.org/docs/essentials/actions

눌렸을 때의 action을 통해 컴포넌트의 변화를 일으킬 수 있어요
호버나 특정 행동에 따라 컴포넌트의 변화가 있다면 적용해야하는 옵션입니다.

(6) * Controls
https://storybook.js.org/docs/essentials/controls

action과 달리 특정한 행위에따라 컴포넌트의 변화를 일으키는 것이 아닌
선택한 옵션에 따라 컴포넌트의 변화를 일으킬 수 있습니다.

예를 들면 선택된 상태인지, 선택되지 않은 상태인지 radio의 형태로 구분하여
단순히 클릭 몇번으로 모든 컴포넌트의 상태의 경우를 확인할 수 있어요


잊지 말아야 할 것

디자이너 시스템 적용의 근원은 디자이너에게 있습니다. 저희는 이를 재사용 가능하도록 코드로 구상할 뿐이죠.
만약 디자이너가 디자인 시스템을 만들 수 없다면 다소 실력이 부족한 디자이너라고 할 수 있어요!
여러분들의 생산성과 개발자 경험을 높이기 위해서 디자인 시스템 사용을 정당화하고 요구할 수 있었으면 좋겠습니다.

@refrences
[https://storybook.js.org](https://storybook.js.org/docs/get-started/install)

[각 template에 따른 스토리북 사용법] 검색에 나온 legacy한 *storiesOf를 사용하지 않도록 주의*
https://new-storybook.netlify.app/


3. 다양한 Style과 UI라이브러리 사용해보기

다양한 style 라이브러리

사실 개인적인 견해로 css는 다양한 형태를 안다고 해서 달라지는 것이 없습니다.
마음만 먹으면 일주일도 안되서 사용법을 거의 완벽히 익힐 수 있기 때문입니다.

중요한 것은 해당 라이브러리를 사용하여 디자인 시스템을 적용하고
장단점과 다른 style 라이브러리와의 차이점을 명확히 구분하는 것입니다.

아래는 다양한 style 라이브러리 중 현재 실무에서 가장 많이 사용하고 있는
style 라이브러리입니다.

아래 항목의 {장단점}을 조사하고 위의 {디자인 시스템}을 적용했던
공용 컴포넌트를 아래의 style 라이브러리로 구현해보세요

(1) tailwind-css는
(2) styled-components
(3) emotion

===================================================================

UI 라이브러리

생산성을 위해서 이미 생성된 라이브러리를 활용하여 빠르게 컴포넌트를 생성할 수 있습니다.

대표적으로 자주 쓰이는 UI 라이브러리는 아래와 같습니다.

(1) MUI
(2) Chakra UI
(3) TailwindCSS UI
(4) Shadcn UI
(5) Headless UI

위의 UI 라이브러리를 활용하여 각각 컴포넌트를 3개 만들어보세요!
단, 결코 복붙으로 옮기면 안되고 본인의 형태로 개조해서 사용해야 합니다.


===================================================================

HeadLess Component란?

Headless component는 스타일이 되어 있지 않은 컴포넌트를 이야기합니다.
즉 개발자에게 모든 디자인을 맡기고 실질적인 기능을 제공하는 것이죠

예를 들면 토글을 위한 Button 을 제공할 때 Toggle.List와 Toggle.Button은
그 어떤 디자인도 되어있지 않습니다.

하지만 여러분이 따로 기능을 구현하지 않아도 버튼을 클릭하면
ToggleList가 보이고 다시 한번 클릭하면 ToggleList가 사라지는 기능을 지원하는 것이죠!

ex)
<Toggle>
    <Toggle.List>
        ...
    </Toggle.List>
    <Toggle.Button>
        Toggle
    </Toggle.Button>
</Toggle>

이 외에도 커스텀 훅을 지원하는 방법으로도 HeadLess Component를 구현하는 경우가 있어요 :)

아래의 경우에도 디자인은 모두 컨트롤이 가능하지만 커스텀 훅을 통해
기능을 지원하고 있는 HeadLess한 component가 될 수 있습니다.

ex)

const {isOpen, onClose, onOpen} = useModal()

<button onClick={()=>onOpen()}></button>
<Modal {...isOpen}>
</Modal>


--------------------------------------------------------------------------

@reference
[https://velog.io/@awesome-hong/리액트-headless-컴포넌트와-디자인시스템을-위해-UI-라이브러리-사용을-중단한-이유-vg8ppeun](https://velog.io/@awesome-hong/%EB%A6%AC%EC%95%A1%ED%8A%B8-headless-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%99%80-%EB%94%94%EC%9E%90%EC%9D%B8%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%84-%EC%9C%84%ED%95%B4-UI-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%82%AC%EC%9A%A9%EC%9D%84-%EC%A4%91%EB%8B%A8%ED%95%9C-%EC%9D%B4%EC%9C%A0-vg8ppeun)
https://www.howdy-mj.me/design/headless-components
https://martinfowler.com/articles/headless-component.html



### 과제1 디자인 시스템을 활용한 공용 컴포넌트 만들기

본문 참조, 기존에 있던 것을 가져다가 쓰는 것이 아닌 스스로 디자인 토큰을 정의하고 반드시 디자인 토큰을 props로 전달 받아야합니다. 디자인 토큰만 전달했을 때 컴포넌트가 생산되도록..!!!

### 과제2 UI 인벤토리 만들기

생성했던 공용 컴포넌트를 스토리북을 활용하여 UI 인벤토리화 해보세요 :}
페이지네이션 컴포넌트를 스토리북을 활용하여 UI 인벤토리화 해세요 :]

### 과제3 다양한 스타일 라이브러리를 활용하여 디자인 시스템 적용하기

본문참조, 다양한 스타일 라이브러리를 활용하여 공용 컴포넌트 만들기

### 과제4 UI 라이브러리 사용하여 컴포넌트 3개씩 사용해보기